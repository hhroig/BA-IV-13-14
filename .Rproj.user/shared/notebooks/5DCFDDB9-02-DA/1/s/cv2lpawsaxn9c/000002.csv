"0","decision_bound = function(train_df_in, test_df_in, model_in){"
"0","  # plot decision boundary  for df <- Default[, c(""income"", ""balance"", ""default"")]"
"0",""
"0","  require(MASS)"
"0","  require(caret)"
"0","  require(ggplot2)"
"0","  require(gridExtra)"
"0",""
"0","  # Paso 1: crear un grid de valores desde min a max de ambos predictores"
"0","  pl = seq(min(train_df_in$balance), max(train_df_in$balance), length.out = 80)"
"0","  pw = seq(min(train_df_in$income), max(train_df_in$income), length.out = 80)"
"0",""
"0","  lgrid <- expand.grid(balance=pl, income=pw)"
"0",""
"0","  # Paso 2: obtener las predicciones tanto para el grid como para el test"
"0","  modelPredGrid <- predict(model_in, newdata=lgrid)"
"0","  train_df_in$Pred.Class <- predict(model_in, newdata = train_df_in)"
"0","  test_df_in$Pred.Class <- predict(model_in, newdata = test_df_in)"
"0",""
"0","  # Paso 3: ggplot con la funcion contour"
"0","  gg1 <- ggplot(data=lgrid) +"
"0","    stat_contour(aes(x=balance, y=income, z=as.numeric(modelPredGrid)), bins=2) +"
"0","    geom_point(aes(x=balance, y=income, colour=modelPredGrid), alpha=0.1) +"
"0","    labs(colour = ""Clases"") + ggtitle(""Train"") +"
"0","    geom_point(data=train_df_in,"
"0","               aes(x=balance, y=income,"
"0","                   colour=default), size=5, shape=1) +"
"0","    theme_light()"
"0",""
"0","  gg2 <- ggplot(data=lgrid) +"
"0","    stat_contour(aes(x=balance, y=income, z=as.numeric(modelPredGrid)), bins=2) +"
"0","    geom_point(aes(x=balance, y=income, colour=modelPredGrid), alpha=0.1) +"
"0","    labs(colour = ""Clases"") + ggtitle(""Test"") +"
"0","    geom_point(data=test_df_in,"
"0","               aes(x=balance, y=income,"
"0","                   colour=default), size=5, shape=1) +"
"0","    theme_light()"
"0","  grid.arrange(gg1, gg2, ncol=1, nrow=2)"
"0","}"
